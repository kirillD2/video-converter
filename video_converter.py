import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import subprocess
import os
import threading

class VideoConverterApp:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.
    –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞—ë–º, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GUI –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏.
    """
    def __init__(self, root):
        self.root = root
        self.root.title("üé• –ö—Ä—É—Ç–æ–π –≤–∏–¥–µ–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
        self.root.geometry("1024x860")  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –æ–∫–Ω–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        self.root.resizable(False, False)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∞
        self.input_file_path = tk.StringVar()
        self.output_format = tk.StringVar(value="mp4")

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π ---
        self.setup_styles()

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ ---
        self.create_widgets()

    def setup_styles(self):
        """
        –ó–¥–µ—Å—å —è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        –¢—ë–º–Ω–∞—è —Ç–µ–º–∞, –Ω–æ–≤—ã–µ —à—Ä–∏—Ñ—Ç—ã –∏ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫.
        """
        # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
        BG_COLOR = "#2E2E2E"
        TEXT_COLOR = "#EAEAEA"
        BUTTON_BG = "#007ACC"
        BUTTON_FG = "#FFFFFF"
        BUTTON_ACTIVE_BG = "#005F9E"
        ENTRY_BG = "#3C3C3C"

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å ttk
        style = ttk.Style(self.root)
        style.theme_use("clam") # –≠—Ç–∞ —Ç–µ–º–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–¥–∞—ë—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–µ

        # –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        style.configure(".",
                        background=BG_COLOR,
                        foreground=TEXT_COLOR,
                        font=("Segoe UI", 10))

        style.configure("TFrame", background=BG_COLOR)

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure("Accent.TButton",
                        font=("Segoe UI", 11, "bold"),
                        background=BUTTON_BG,
                        foreground=BUTTON_FG,
                        borderwidth=0)
        style.map("Accent.TButton",
                  background=[("active", BUTTON_ACTIVE_BG)],
                  foreground=[("active", BUTTON_FG)])

        # –°—Ç–∏–ª—å –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        style.configure("TCombobox",
                        fieldbackground=ENTRY_BG,
                        background=BUTTON_BG,
                        arrowcolor=TEXT_COLOR,
                        foreground=TEXT_COLOR,
                        selectbackground=ENTRY_BG,
                        borderwidth=0)
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        style.configure("TEntry",
                        fieldbackground=ENTRY_BG,
                        foreground=TEXT_COLOR,
                        borderwidth=1,
                        relief="flat")
        
        # –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        style.configure("Status.TLabel",
                        font=("Segoe UI", 9, "italic"),
                        foreground="#9A9A9A")


    def create_widgets(self):
        """
        –°–æ–∑–¥–∞—ë—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –æ–∫–Ω–µ.
        """
        # --- –§—Ä–µ–π–º –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
        # –û—Ç—Å—Ç—É–ø—ã (padding) –¥–µ–ª–∞—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–¥—ã—à–∞—â–∏–º"
        content_frame = ttk.Frame(self.root, padding="20 20 20 20")
        content_frame.pack(expand=True, fill="both")

        # --- 1. –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ ---
        input_label = ttk.Label(content_frame, text="1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–∏–¥–µ–æ—Ñ–∞–π–ª:")
        input_label.pack(pady=(0, 5), anchor="w")

        # –°–æ–∑–¥–∞—ë–º —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –Ω–∞ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏
        file_frame = ttk.Frame(content_frame)
        file_frame.pack(fill="x", expand=True)

        input_entry = ttk.Entry(file_frame, textvariable=self.input_file_path, width=40, state="readonly")
        input_entry.pack(side="left", fill="x", expand=True, ipady=4)

        browse_button = ttk.Button(file_frame, text="üóÇÔ∏è –û–±–∑–æ—Ä...", command=self.browse_file, style="Accent.TButton")
        browse_button.pack(side="left", padx=(10, 0))


        # --- 2. –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ ---
        format_label = ttk.Label(content_frame, text="2. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        format_label.pack(pady=(20, 5), anchor="w")

        formats = ["mp4", "avi", "mov", "wmv"]
        format_menu = ttk.Combobox(content_frame, textvariable=self.output_format, values=formats, state="readonly")
        format_menu.pack(fill="x", ipady=2)

        # --- 3. –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ---
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π "–∞–∫—Ü–µ–Ω—Ç–Ω—ã–π" —Å—Ç–∏–ª—å
        convert_button = ttk.Button(content_frame, text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.start_conversion_thread, style="Accent.TButton")
        convert_button.pack(pady=30, ipady=8, fill="x")

        # --- 4. –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ ---
        self.status_label = ttk.Label(content_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...", style="Status.TLabel", anchor="center")
        self.status_label.pack(pady=(10, 0), fill="x")

    def browse_file(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.
        """
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
            filetypes=(
                ("–í–∏–¥–µ–æ—Ñ–∞–π–ª—ã", "*.mp4 *.avi *.mov *.mkv *.flv *.wmv"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            )
        )
        if file_path:
            self.input_file_path.set(file_path)
            self.status_label.config(text=f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")

    def start_conversion_thread(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
        —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª
        if not self.input_file_path.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        conversion_thread = threading.Thread(target=self.convert_video, daemon=True)
        conversion_thread.start()

    def convert_video(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg.
        """
        input_path = self.input_file_path.get()
        output_format = self.output_format.get()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_dir, file_name = os.path.split(input_path)
        file_base_name, _ = os.path.splitext(file_name)
        output_path = os.path.join(file_dir, f"{file_base_name}.{output_format}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.root.after(0, self.status_label.config, {"text": "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."})

        try:
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è FFmpeg.
            # -i: –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            # -y: –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            # -c:v copy -c:a copy: –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–µ–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã—Å—Ç—Ä–æ)
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å -c:v –∏ -c:a
            command = [
                "ffmpeg",
                "-i", input_path,
                "-y",
                output_path
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg –∫–∞–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å
            # startupinfo –Ω—É–∂–µ–Ω –¥–ª—è Windows, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ –∫–æ–Ω—Å–æ–ª–∏
            si = None
            if os.name == 'nt':
                si = subprocess.STARTUPINFO()
                si.dwFlags |= subprocess.STARTF_USESHOWWINDOW

            process = subprocess.Popen(command, startupinfo=si, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            stdout, stderr = process.communicate()

            if process.returncode == 0:
                # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                success_message = f"–ì–æ—Ç–æ–≤–æ! ‚úÖ\n–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫:\n{output_path}"
                self.root.after(0, messagebox.showinfo, "–£—Å–ø–µ—Ö", success_message)
                self.root.after(0, self.status_label.config, {"text": "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."})
            else:
                # –ï—Å–ª–∏ FFmpeg –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
                error_message = f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n{stderr}"
                self.root.after(0, messagebox.showerror, "–û—à–∏–±–∫–∞ FFmpeg", error_message)
                self.root.after(0, self.status_label.config, {"text": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."})

        except FileNotFoundError:
            # –ï—Å–ª–∏ FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω
            error_message = "FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH."
            self.root.after(0, messagebox.showerror, "–û—à–∏–±–∫–∞", error_message)
            self.root.after(0, self.status_label.config, {"text": "–û—à–∏–±–∫–∞: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω."})
        except Exception as e:
            # –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{e}"
            self.root.after(0, messagebox.showerror, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_message)
            self.root.after(0, self.status_label.config, {"text": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞."})

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
if __name__ == "__main__":
    root = tk.Tk()
    app = VideoConverterApp(root)
    root.mainloop() 